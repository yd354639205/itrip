  Spring Boot 是所有基于 Spring 开发的项目的起点。
  Spring Boot 的设计是为了让你尽可能快的跑起来 Spring 应用程序并且尽可能减少你的配置文件。
  什么是 Spring Boot
1.它使用 “习惯优于配置” （项目中存在大量的配置，此外还内置一个习惯性的配置，让你无须）的理念让你的项目快速运行起来。
2.它并不是什么新的框架，而是默认配置了很多框架的使用方式，就像 Maven 整合了所有的 jar 包一样，Spring Boot 整合了所有框架
  使用 Spring Boot 有什么好处
回顾我们之前的 SSM 项目，搭建过程还是比较繁琐的，需要：
1）配置 web.xml，加载 spring 和 spring mvc
2）配置数据库连接、配置日志文件
3）配置文件的读取，开启注解
4）配置mapper文件
而使用 Spring Boot 来开发项目则只需要非常少的几个配置就可以搭建起来一个 Web 项目，并且利用 IDEA 可以自动生成生成。
简单、快速、方便地搭建项目；对主流开发框架的无配置集成；极大提高了开发、部署效率。
  Spring Boot 搭建
新建项目，选择Spring Initializr，
如果是第一次配置 Spring Boot 的话可能需要等待一会儿 IDEA 下载相应的 依赖包，
默认生成：
SpringbootApplication： 一个带有 main() 方法的类，用于启动应用程序
SpringbootApplicationTests：一个空的 Junit 测试了，它加载了一个使用 Spring Boot 字典配置功能的 Spring 应用程序上下文
application.properties：一个空的 properties 文件，可以根据需要添加配置属性
pom.xml： Maven 构建说明文件
springboot内置了tomcat，直接运行SpringbootApplication。
SpringbootApplication有@SpringBootApplication注解
@SpringBootApplication 是 Spring Boot 的核心注解，它是一个组合注解，该注解组合了：@Configuration、@EnableAutoConfiguration、@ComponentScan； 
若不是用 @SpringBootApplication 注解也可以使用这三个注解代替。
  1.其中，@EnableAutoConfiguration 让 Spring Boot 根据类路径中的 jar 包依赖为当前项目进行自动配置，
  例如，添加了 spring-boot-starter-web 依赖，会自动添加 Tomcat 和 Spring MVC 的依赖，那么 Spring Boot 会对 Tomcat 和 Spring MVC 进行自动配置。
  2.Spring Boot 还会自动扫描 @SpringBootApplication 所在类的同级包以及下级包里的 Bean ，
  所以入口类建议就配置在 grounpID + arctifactID 组合的包名下。
Spring Boot 的配置文件
  Spring Boot 使用一个全局的配置文件 application.properties 或 application.yml，放置在【src/main/resources】目录或者类路径的 /config 下。
  Spring Boot 不仅支持常规的 properties 配置文件，还支持 yaml 语言的配置文件。yaml 是以数据为中心的语言，在配置数据的时候具有面向对象的特征。
  Spring Boot 的全局配置文件的作用是对一些默认配置的配置值进行修改。
  注意： yml 需要在 “:” 后加一个空格
  我们可以自己配置多个属性
Spring Boot 热部署
  在目前的 Spring Boot 项目中，当发生了任何修改之后我们都需要重新启动才能够正确的得到效果，这样会略显麻烦，
  Spring Boot 提供了热部署的方式，当发现任何类发生了改变，就会通过 JVM 类加载的方式，加载最新的类到虚拟机中，
  这样就不需要重新启动也能看到修改后的效果了。
  --我们往 pom.xml 中添加一个依赖就可以了：
  <dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-devtools</artifactId>
    <optional>true</optional> <!-- 这个需要为 true 热部署才有效 -->
  </dependency>
